generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                 String             @id @default(uuid())
  name               String
  domain             String             @unique
  email              String
  phone              String?
  type               SchoolType
  logoUrl            String?
  address            String?
  city               String?
  county             String?
  country            String?            @default("Kenya")
  postalCode         String?
  registrationNumber String?
  legalName          String?
  contactPerson      String?
  contactEmail       String?
  contactPhone       String?
  subscriptionPlan   SubscriptionPlan   @default(BASIC)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  maxUsers           Int?               @default(100)
  maxStudents        Int?               @default(500)
  status             TenantStatus       @default(ACTIVE)
  timezone           String?            @default("Africa/Nairobi")
  currency           String?            @default("KES")
  createdBy          String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  academicYears      AcademicYear[]
  assessments        Assessment[]
  attendanceRecords  AttendanceRecord[]
  buses              Bus[]
  campuses           Campus[]
  classLevels        ClassLevel[]
  classRooms         ClassRoom[]
  classStreams       ClassStream[]
  examResults        ExamResult[]
  feeItems           FeeItem[]
  feeStructures      FeeStructure[]
  invoices           Invoice[]
  lessonAllocations  LessonAllocation[]
  notifications      Notification[]
  parents            Parent[]
  payments           Payment[]
  permissions        Permission[]
  receipts           Receipt[]
  reportCards        ReportCard[]
  roles              Role[]
  students           Student[]
  subjects           Subject[]
  systemLogs         SystemLog[]
  teachers           Teacher[]
  branding           TenantBranding?
  terms              Term[]
  timetables         TimetableSlot[]
  transportBookings  TransportBooking[]
  transportRoutes    TransportRoute[]
  users              User[]

  @@index([domain])
  @@index([status])
  @@index([type])
}

model TenantBranding {
  id              String   @id @default(uuid())
  tenantId        String   @unique
  primaryColor    String   @default("#2563eb")
  secondaryColor  String   @default("#059669")
  logoUrl         String?
  faviconUrl      String?
  tagline         String?
  description     String?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Campus {
  id         String      @id @default(uuid())
  tenantId   String
  name       String
  address    String?
  city       String?
  county     String?
  phone      String?
  email      String?
  isMain     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  classRooms ClassRoom[]
  users      User[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String?
  firstName       String
  lastName        String
  phone           String?
  avatar          String?
  tenantId        String?
  campusId        String?
  verified        Boolean           @default(false)
  active          Boolean           @default(true)
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastLoginAt     DateTime?
  loginAttempts   LoginAttempt[]
  notifications   Notification[]
  otps            OTP[]
  parentProfile   Parent?
  passwordHistory PasswordHistory[]
  refreshTokens   RefreshToken[]
  sessions        Session[]
  systemLogs      SystemLog[]
  teacherProfile  Teacher?
  campus          Campus?           @relation(fields: [campusId], references: [id])
  tenant          Tenant?           @relation(fields: [tenantId], references: [id])
  userPermissions UserPermission[]
  userRoles       UserRole[]

  @@index([tenantId])
  @@index([email])
  @@index([active])
}

model Role {
  id               String           @id @default(uuid())
  name             String
  displayName      String
  description      String?
  tenantId         String?
  isSystemRole     Boolean          @default(false)
  isDefault        Boolean          @default(false)
  loginDestination String?          @default("/dashboard")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tenant           Tenant?          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions      RolePermission[]
  userRoles        UserRole[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([isSystemRole])
}

model Permission {
  id              String           @id @default(uuid())
  module          String
  action          String
  description     String?
  tenantId        String?
  tenant          Tenant?          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([module, action, tenantId])
  @@index([module])
  @@index([tenantId])
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  isDefault  Boolean  @default(false)
  assignedAt DateTime @default(now())
  assignedBy String?
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  allowed      Boolean    @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  allowed      Boolean    @default(true)
  reason       String?
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  expiresAt    DateTime?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

model AcademicYear {
  id          String       @id @default(uuid())
  tenantId    String
  name        String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assessments Assessment[]
  classRooms  ClassRoom[]
  terms       Term[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([isActive])
}

model Term {
  id             String       @id @default(uuid())
  tenantId       String
  academicYearId String
  name           String
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assessments    Assessment[]
  ReportCard     ReportCard[]
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, academicYearId, name])
  @@index([tenantId])
  @@index([academicYearId])
  @@index([isActive])
}

model ClassLevel {
  id            String         @id @default(uuid())
  tenantId      String
  name          String
  level         Int
  schoolType    SchoolType
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  classRooms    ClassRoom[]
  feeStructures FeeStructure[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([level])
}

model ClassStream {
  id         String      @id @default(uuid())
  tenantId   String
  name       String
  code       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  classRooms ClassRoom[]
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@unique([tenantId, code])
  @@index([tenantId])
}

model ClassRoom {
  id                String             @id @default(uuid())
  tenantId          String
  campusId          String?
  academicYearId    String
  classLevelId      String
  classStreamId     String?
  name              String
  code              String
  capacity          Int?               @default(40)
  classTeacherId    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessments       Assessment[]
  attendanceRecords AttendanceRecord[]
  academicYear      AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  campus            Campus?            @relation(fields: [campusId], references: [id])
  classLevel        ClassLevel         @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  classStream       ClassStream?       @relation(fields: [classStreamId], references: [id])
  classTeacher      Teacher?           @relation("ClassTeacherAssignments", fields: [classTeacherId], references: [id])
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lessonAllocations LessonAllocation[]
  ReportCard        ReportCard[]
  students          Student[]
  timetableSlots    TimetableSlot[]

  @@unique([tenantId, academicYearId, name])
  @@index([tenantId])
  @@index([academicYearId])
  @@index([classLevelId])
  @@index([classTeacherId])
}

model Subject {
  id                String             @id @default(uuid())
  tenantId          String
  name              String
  code              String
  category          SubjectCategory
  description       String?
  minClassLevel     Int?
  maxClassLevel     Int?
  isCompulsory      Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessments       Assessment[]
  examResults       ExamResult[]
  lessonAllocations LessonAllocation[]
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
  @@index([tenantId])
  @@index([category])
}

model Student {
  id                String              @id @default(uuid())
  tenantId          String
  firstName         String
  lastName          String
  middleName        String?
  dateOfBirth       DateTime?
  gender            Gender
  nationalId        String?
  passportNumber    String?
  phone             String?
  email             String?
  address           String?
  studentNumber     String
  classRoomId       String?
  admissionDate     DateTime?
  admissionNumber   String?
  previousSchool    String?
  emergencyContact  String?
  emergencyPhone    String?
  medicalConditions String?
  allergies         String?
  specialNeeds      String?
  status            StudentStatus       @default(ACTIVE)
  graduationDate    DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  attendanceRecords AttendanceRecord[]
  examResults       ExamResult[]
  invoices          Invoice[]
  payments          Payment[]
  receipts          Receipt[]
  reportCards       ReportCard[]
  classRoom         ClassRoom?          @relation(fields: [classRoomId], references: [id])
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  StudentAttendance StudentAttendance[]
  parentLinks       StudentParent[]
  transportBookings TransportBooking[]

  @@unique([tenantId, studentNumber])
  @@index([tenantId])
  @@index([classRoomId])
  @@index([status])
}

model Parent {
  id                 String          @id @default(uuid())
  tenantId           String
  userId             String?         @unique
  firstName          String
  lastName           String
  middleName         String?
  gender             Gender
  nationalId         String?
  phone              String
  email              String?
  address            String?
  occupation         String?
  employer           String?
  workPhone          String?
  isEmergencyContact Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user               User?           @relation(fields: [userId], references: [id])
  studentLinks       StudentParent[]

  @@unique([tenantId, phone])
  @@index([tenantId])
  @@index([userId])
}

model StudentParent {
  id           String             @id @default(uuid())
  studentId    String
  parentId     String
  relationship ParentRelationship
  isPrimary    Boolean            @default(false)
  createdAt    DateTime           @default(now())
  parent       Parent             @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student      Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@index([studentId])
  @@index([parentId])
}

model Teacher {
  id                      String             @id @default(uuid())
  tenantId                String
  userId                  String             @unique
  employeeNumber          String
  tscNumber               String?
  qualification           String?
  specialization          String?
  employmentDate          DateTime?
  employmentType          EmploymentType     @default(PERMANENT)
  contractEndDate         DateTime?
  phone                   String?
  address                 String?
  emergencyContact        String?
  emergencyPhone          String?
  status                  TeacherStatus      @default(ACTIVE)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  classTeacherAssignments ClassRoom[]        @relation("ClassTeacherAssignments")
  lessonAllocations       LessonAllocation[]
  tenant                  Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, employeeNumber])
  @@index([tenantId])
  @@index([userId])
  @@index([status])
}

model TimetableSlot {
  id                String             @id @default(uuid())
  tenantId          String
  classRoomId       String?
  dayOfWeek         DayOfWeek
  periodNumber      Int
  startTime         String
  endTime           String
  duration          Int
  name              String?
  isBreak           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lessonAllocations LessonAllocation[]
  classRoom         ClassRoom?         @relation(fields: [classRoomId], references: [id])
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, classRoomId, dayOfWeek, periodNumber])
  @@index([tenantId])
  @@index([classRoomId])
  @@index([dayOfWeek])
}

model LessonAllocation {
  id              String        @id @default(uuid())
  tenantId        String
  classRoomId     String
  subjectId       String
  teacherId       String
  timetableSlotId String
  venue           String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  classRoom       ClassRoom     @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  timetableSlot   TimetableSlot @relation(fields: [timetableSlotId], references: [id], onDelete: Cascade)

  @@unique([classRoomId, timetableSlotId])
  @@index([tenantId])
  @@index([classRoomId])
  @@index([subjectId])
  @@index([teacherId])
}

model AttendanceRecord {
  id                 String              @id @default(uuid())
  tenantId           String
  classRoomId        String
  date               DateTime            @db.Date
  takenBy            String
  takenAt            DateTime            @default(now())
  notes              String?
  studentId          String?
  classRoom          ClassRoom           @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  Student            Student?            @relation(fields: [studentId], references: [id])
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  studentAttendances StudentAttendance[]

  @@unique([tenantId, classRoomId, date])
  @@index([tenantId])
  @@index([classRoomId])
  @@index([date])
}

model StudentAttendance {
  id                 String           @id @default(uuid())
  attendanceRecordId String
  studentId          String
  status             AttendanceStatus
  arrivalTime        DateTime?
  departureTime      DateTime?
  notes              String?
  attendanceRecord   AttendanceRecord @relation(fields: [attendanceRecordId], references: [id], onDelete: Cascade)
  student            Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([attendanceRecordId, studentId])
  @@index([attendanceRecordId])
  @@index([studentId])
  @@index([status])
}

model Assessment {
  id             String           @id @default(uuid())
  tenantId       String
  academicYearId String
  termId         String
  classRoomId    String
  subjectId      String
  name           String
  type           AssessmentType
  description    String?
  scheduledDate  DateTime?
  duration       Int?
  venue          String?
  totalMarks     Int
  passingMarks   Int?
  status         AssessmentStatus @default(SCHEDULED)
  createdBy      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classRoom      ClassRoom        @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  subject        Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  tenant         Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  term           Term             @relation(fields: [termId], references: [id], onDelete: Cascade)
  examResults    ExamResult[]

  @@index([tenantId])
  @@index([academicYearId])
  @@index([termId])
  @@index([classRoomId])
  @@index([subjectId])
  @@index([status])
}

model ExamResult {
  id            String     @id @default(uuid())
  assessmentId  String
  studentId     String
  subjectId     String
  marksObtained Int
  totalMarks    Int
  percentage    Float
  grade         String?
  remarks       String?
  enteredBy     String
  enteredAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tenantId      String?
  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student       Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject       Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Tenant        Tenant?    @relation(fields: [tenantId], references: [id])

  @@unique([assessmentId, studentId, subjectId])
  @@index([assessmentId])
  @@index([studentId])
  @@index([subjectId])
}

model ReportCard {
  id                  String           @id @default(uuid())
  studentId           String
  termId              String
  classRoomId         String
  totalMarks          Int
  averageMarks        Float
  position            Int?
  outOf               Int?
  overallGrade        String?
  daysPresent         Int?
  daysAbsent          Int?
  totalDays           Int?
  classTeacherComment String?
  headTeacherComment  String?
  status              ReportCardStatus @default(DRAFT)
  publishedAt         DateTime?
  generatedBy         String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  tenantId            String?
  classRoom           ClassRoom        @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  student             Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Tenant              Tenant?          @relation(fields: [tenantId], references: [id])
  term                Term             @relation(fields: [termId], references: [id], onDelete: Cascade)

  @@unique([studentId, termId])
  @@index([studentId])
  @@index([termId])
  @@index([classRoomId])
  @@index([status])
}

model FeeItem {
  id                String             @id @default(uuid())
  tenantId          String
  name              String
  description       String?
  category          FeeCategory
  amount            Decimal            @db.Decimal(10, 2)
  currency          String             @default("KES")
  isCompulsory      Boolean            @default(true)
  isRecurring       Boolean            @default(true)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feeStructureItems FeeStructureItem[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([category])
  @@index([isActive])
}

model FeeStructure {
  id            String             @id @default(uuid())
  tenantId      String
  classLevelId  String
  name          String
  description   String?
  effectiveFrom DateTime
  effectiveTo   DateTime?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  classLevel    ClassLevel         @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feeItems      FeeStructureItem[]

  @@unique([tenantId, classLevelId, effectiveFrom])
  @@index([tenantId])
  @@index([classLevelId])
  @@index([isActive])
}

model FeeStructureItem {
  id             String       @id @default(uuid())
  feeStructureId String
  feeItemId      String
  amount         Decimal      @db.Decimal(10, 2)
  feeItem        FeeItem      @relation(fields: [feeItemId], references: [id], onDelete: Cascade)
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  @@unique([feeStructureId, feeItemId])
  @@index([feeStructureId])
  @@index([feeItemId])
}

model Invoice {
  id            String        @id @default(uuid())
  tenantId      String
  studentId     String
  invoiceNumber String        @unique
  description   String?
  totalAmount   Decimal       @db.Decimal(10, 2)
  paidAmount    Decimal       @default(0) @db.Decimal(10, 2)
  balanceAmount Decimal       @db.Decimal(10, 2)
  currency      String        @default("KES")
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(PENDING)
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments      Payment[]
  receipts      Receipt[]

  @@index([tenantId])
  @@index([studentId])
  @@index([status])
  @@index([dueDate])
}

model Payment {
  id            String        @id @default(uuid())
  tenantId      String
  studentId     String
  invoiceId     String?
  paymentNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("KES")
  method        PaymentMethod
  reference     String?
  paymentDate   DateTime      @default(now())
  status        PaymentStatus @default(PENDING)
  notes         String?
  recordedBy    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id])
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  receipt       Receipt?

  @@index([tenantId])
  @@index([studentId])
  @@index([invoiceId])
  @@index([status])
  @@index([paymentDate])
}

model Receipt {
  id            String   @id @default(uuid())
  tenantId      String
  studentId     String
  paymentId     String   @unique
  receiptNumber String   @unique
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("KES")
  description   String?
  issueDate     DateTime @default(now())
  issuedBy      String
  createdAt     DateTime @default(now())
  invoiceId     String?
  Invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  payment       Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([studentId])
  @@index([receiptNumber])
}

model TransportRoute {
  id          String             @id @default(uuid())
  tenantId    String
  name        String
  description String?
  startPoint  String
  endPoint    String
  distance    Float?
  monthlyFee  Decimal?           @db.Decimal(10, 2)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  buses       Bus[]
  bookings    TransportBooking[]
  tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  stops       TransportStop[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([isActive])
}

model TransportStop {
  id        String             @id @default(uuid())
  routeId   String
  name      String
  latitude  Float?
  longitude Float?
  order     Int
  bookings  TransportBooking[]
  route     TransportRoute     @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, order])
  @@index([routeId])
}

model Bus {
  id                 String          @id @default(uuid())
  tenantId           String
  routeId            String?
  registrationNumber String          @unique
  capacity           Int
  model              String?
  year               Int?
  driverName         String?
  driverPhone        String?
  driverLicense      String?
  status             BusStatus       @default(ACTIVE)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  route              TransportRoute? @relation(fields: [routeId], references: [id])
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([routeId])
  @@index([status])
}

model TransportBooking {
  id         String         @id @default(uuid())
  tenantId   String
  studentId  String
  routeId    String
  stopId     String
  startDate  DateTime
  endDate    DateTime?
  monthlyFee Decimal        @db.Decimal(10, 2)
  status     BookingStatus  @default(ACTIVE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  route      TransportRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  stop       TransportStop  @relation(fields: [stopId], references: [id], onDelete: Cascade)
  student    Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant     Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([studentId, routeId, startDate])
  @@index([tenantId])
  @@index([studentId])
  @@index([routeId])
  @@index([status])
}

model Notification {
  id        String           @id @default(uuid())
  tenantId  String
  userId    String
  title     String
  message   String
  type      NotificationType
  category  String?
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model SystemLog {
  id        String   @id @default(uuid())
  tenantId  String?
  userId    String?
  action    String
  entity    String?
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  deviceInfo Json?
  ipAddress  String?
  userAgent  String?
  isActive   Boolean  @default(true)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([isActive])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model OTP {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      OTPType
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
  @@index([type])
}

model PasswordHistory {
  id           String   @id @default(uuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  userId     String?
  email      String
  ipAddress  String
  userAgent  String?
  successful Boolean
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
}

enum SchoolType {
  PRIMARY
  SECONDARY
  UNIVERSITY
  COLLEGE
  KINDERGARTEN
  SPECIAL_NEEDS
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  EXPIRED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
  EXPELLED
  DROPOUT
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  RESIGNED
  RETIRED
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  PART_TIME
  VOLUNTEER
}

enum ParentRelationship {
  FATHER
  MOTHER
  GUARDIAN
  SIBLING
  GRANDPARENT
  UNCLE
  AUNT
  OTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  HALF_DAY
}

enum AssessmentType {
  QUIZ
  TEST
  EXAM
  PROJECT
  ASSIGNMENT
  PRACTICAL
  ORAL
}

enum AssessmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportCardStatus {
  DRAFT
  PUBLISHED
  SENT
}

enum SubjectCategory {
  CORE
  ELECTIVE
  EXTRA_CURRICULAR
  LANGUAGE
  SCIENCE
  ARTS
  TECHNICAL
  RELIGIOUS
}

enum FeeCategory {
  TUITION
  TRANSPORT
  MEALS
  BOOKS
  UNIFORM
  LABORATORY
  LIBRARY
  SPORTS
  EXAM
  OTHER
}

enum InvoiceStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MPESA
  CHEQUE
  CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum BusStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
  RETIRED
}

enum BookingStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum OTPType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}
